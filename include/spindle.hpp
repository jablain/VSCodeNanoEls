#pragma once
#include "config.hpp"
#include <atomic>

extern std::atomic<float> currentRpm;
extern std::atomic<float> currentAngle;

extern unsigned long spindleEncTime; // micros() of the previous spindle update
extern long spindlePos; // Spindle position
extern long spindlePosAvg; // Spindle position accounting for encoder backlash
extern int spindlePosSync; // Non-zero if gearbox is on and a soft limit was removed while axis was on it
extern long spindlePosGlobal; // global spindle position that is unaffected by e.g. zeroing

extern volatile int pulse1Delta; // Outstanding pulses generated by pulse generator on terminal A1.
extern volatile int pulse2Delta; // Outstanding pulses generated by pulse generator on terminal A2.


inline long spindleModulo (long value) { return (value + ENCODER_STEPS_INT) % ENCODER_STEPS_INT; }
inline void zeroSpindlePos() {
  spindlePos     = 0;
  spindlePosAvg  = 0;
  spindlePosSync = 0;
};
void processSpindlePosDelta(); // Core 1 Task that processes encoder ticks
void taskAttachInterrupts(void *param); // Core 0 Task that attaches interrupts to the encoder pins
